{"version":3,"file":"AccountPage-Cy4plrzU.js","sources":["../../src/Widgets/ChangePassword/changePasswordArr.tsx","../../src/api/me/fetchChange.ts","../../src/Widgets/ChangePassword/ChangePassword.tsx","../../src/api/me/fetchNewName.ts","../../src/Widgets/ChangeUsername/ChangeUsername.tsx","../../src/Widgets/EditProfile/EditProfile.tsx","../../src/Pages/AccountPage/AccountPage.tsx"],"sourcesContent":["import Key from \"../../svg/Key\";\nimport { ElementProps } from \"../Register/registerElementArr\";\n\nexport type ChangePassword = \"newPassword\" | \"oldPassword\" | \"confirm\";\n\nexport const changePasswordArr: Array<ElementProps<ChangePassword>> = [\n  {\n    id: 1,\n    svg: <Key />,\n    placeholder: \"Old password\",\n    type: \"password\",\n    name: \"oldPassword\",\n  },\n  {\n    id: 2,\n    svg: <Key />,\n    placeholder: \"New password\",\n    type: \"password\",\n    name: \"newPassword\",\n  },\n  {\n    id: 3,\n    svg: <Key />,\n    placeholder: \"Confirm password\",\n    type: \"password\",\n    name: \"confirm\",\n  },\n];\n","import { z } from \"zod\";\nimport { instance } from \"../../api/config\";\n\nexport const createChangePasswordShema = z.object({\n  oldPassword: z.string().min(6, \"Password should be at least 6 characters\"),\n  newPassword: z.string().min(6, \"Password should be at least 6 characters\"),\n  confirm: z.string().min(6, \"Password should be at least 6 characters\"),\n})\n.refine((data) => data.newPassword === data.confirm, {\n    message: \"The passwords don't match\",\n    path: ['confirm']\n})\n\nexport type createChangePasswordForm = z.infer<typeof createChangePasswordShema>;\n\nexport async function changePassword(data: createChangePasswordForm): Promise<void> {\n  const postData = Object.fromEntries(Object.entries(data).filter(([key]) => key !== 'confirm'));\n  await instance.patch(`/me/password`, postData)\n    .catch((err) => {\n      throw new Error(err.response.data.message)\n    })\n}\n","import { Button } from \"ui-components_innowise\";\nimport \"./changePassword.css\";\nimport InputElement from \"../../Shared/InputElement/InputElement\";\nimport { changePasswordArr } from \"./changePasswordArr\";\nimport Loader from \"../../Shared/Loader/Loader\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport ErrorMessageFetch from \"../../Shared/ErrorMessageFetch/ErrorMessageFetch\";\nimport {\n  changePassword,\n  createChangePasswordForm,\n  createChangePasswordShema,\n} from \"../../api/me/fetchChange\";\n\nconst ChangePassword = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<createChangePasswordForm>({\n    resolver: zodResolver(createChangePasswordShema),\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: changePassword,\n    onSuccess() {\n      reset();\n    },\n  });\n\n  return (\n    <form\n      className=\"edit-password\"\n      onSubmit={handleSubmit((data) => {\n        registerMutation.mutate(data);\n      })}\n    >\n      <h4>Change your password:</h4>\n\n      {changePasswordArr.map((elem) => (\n        <InputElement\n          key={elem.id}\n          svg={elem.svg}\n          placeholder={elem.placeholder}\n          type={elem.type}\n          inputProp={{ ...register(elem.name) }}\n          errorMessage={errors[elem.name]?.message}\n        />\n      ))}\n\n      <ErrorMessageFetch mutation={registerMutation} />\n\n      {registerMutation.isSuccess && (\n        <span className=\"register--correct\">\n          Password successfully updated!\"\n        </span>\n      )}\n\n      <Button classes=\"edit-user--btn\">\n        {registerMutation.isPending ? (\n          <Loader type=\"small\" />\n        ) : (\n          \"Change password\"\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default ChangePassword;\n","import { z } from \"zod\";\nimport { instance } from \"../config\";\nimport { fetchMe, userType } from \"../auth/authLogin\";\n\nexport const createChangeNameShema = z.object({\n  username: z.string().min(5, \"Username should be at least 5 characters\"),\n  password: z.string().min(6, \"Password should be at least 6 characters\"),\n})\n\nexport type createChangeNameForm = z.infer<typeof createChangeNameShema>;\n\nexport async function changeUserName(data: createChangeNameForm): Promise<userType> {\n  await instance.patch(`/me`, data)\n  return fetchMe();\n}\n","import { Button } from \"ui-components_innowise\";\nimport \"./changeUsername.css\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport InputElement from \"../../Shared/InputElement/InputElement\";\nimport {\n  changeUserName,\n  createChangeNameForm,\n  createChangeNameShema,\n} from \"../../api/me/fetchNewName\";\nimport Loader from \"../../Shared/Loader/Loader\";\nimport { queryCLient } from \"../../api/queryClients\";\nimport { loginElementArr } from \"../Login/loginElementArr\";\nimport ErrorMessageFetch from \"../../Shared/ErrorMessageFetch/ErrorMessageFetch\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserInfo } from \"../../store/userSlice\";\n\nconst ChangeUsername = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<createChangeNameForm>({\n    resolver: zodResolver(createChangeNameShema),\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: changeUserName,\n    onSuccess(data) {\n      dispatch(setUserInfo(data));\n      reset();\n      queryCLient.invalidateQueries({ queryKey: [\"me\"] });\n    },\n  });\n\n  return (\n    <form\n      className=\"edit-name\"\n      onSubmit={handleSubmit((data) => {\n        registerMutation.mutate(data);\n      })}\n    >\n      <h4>Change your username:</h4>\n\n      {loginElementArr.map((elem) => (\n        <InputElement\n          key={elem.id}\n          svg={elem.svg}\n          placeholder={elem.placeholder}\n          type={elem.type}\n          inputProp={{ ...register(elem.name) }}\n          errorMessage={errors[elem.name]?.message}\n        />\n      ))}\n\n      <ErrorMessageFetch mutation={registerMutation} />\n\n      {registerMutation.isSuccess && (\n        <span className=\"register--correct\">\n          Username successfully updated!\"\n        </span>\n      )}\n\n      <Button classes=\"edit-user--btn\">\n        {registerMutation.isPending ? <Loader type=\"small\" /> : \"Save\"}\n      </Button>\n    </form>\n  );\n};\n\nexport default ChangeUsername;\n","import ChangePassword from \"../ChangePassword/ChangePassword\";\nimport ChangeUsername from \"../ChangeUsername/ChangeUsername\";\nimport \"./editProfile.css\";\n\nconst EditProfile = () => {\n  return (\n    <div className=\"edit-profile\">\n      <h3 className=\"edit-profile__title\">Edit your profile:</h3>\n      <div className=\"edit-wrapper\">\n        <ChangeUsername />\n        <ChangePassword />\n      </div>\n    </div>\n  );\n};\n\nexport default EditProfile;\n","import \"./accountPage.css\";\nimport HeaderSection from \"../../Widgets/HeaderSection/HeaderSection\";\nimport AccountInfo from \"../../Widgets/AccountInfo/AccountInfo\";\nimport EditProfile from \"../../Widgets/EditProfile/EditProfile\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\n\nconst AccountPage = () => {\n  const userName = useSelector((state: RootState) => state.userState.username);\n\n  return (\n    <section className=\"account\">\n      <HeaderSection\n        children={\n          <div className=\"account__title\">\n            <span>Welcome,</span>\n            <span className=\"welcome\">{userName}</span>\n          </div>\n        }\n      />\n      <AccountInfo forPage=\"account\" />\n      <EditProfile />\n    </section>\n  );\n};\n\nexport default AccountPage;\n"],"names":["changePasswordArr","Key","createChangePasswordShema","z","data","changePassword","postData","key","instance","err","ChangePassword","register","handleSubmit","errors","reset","useForm","zodResolver","registerMutation","useMutation","jsxs","jsx","elem","InputElement","_a","ErrorMessageFetch","Button","Loader","createChangeNameShema","changeUserName","fetchMe","ChangeUsername","dispatch","useDispatch","setUserInfo","queryCLient","loginElementArr","EditProfile","AccountPage","userName","useSelector","state","HeaderSection","AccountInfo"],"mappings":"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"}