{"version":3,"file":"loginElementArr-Bu_bBODg.js","sources":["../../src/svg/Key.tsx","../../src/api/auth/authLogin.ts","../../src/Widgets/Login/loginElementArr.tsx"],"sourcesContent":["const Key = () => {\n  return (\n    <svg\n      className=\"key-svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M12.917 13C12.441 15.8377 9.973 18 7 18C3.68629 18 1 15.3137 1 12C1 8.68629 3.68629 6 7 6C9.973 6 12.441 8.16229 12.917 11H23V13H21V17H19V13H17V17H15V13H12.917ZM7 16C9.20914 16 11 14.2091 11 12C11 9.79086 9.20914 8 7 8C4.79086 8 3 9.79086 3 12C3 14.2091 4.79086 16 7 16Z\"\n        fill=\"#000\"\n      />\n    </svg>\n  );\n};\n\nexport default Key;\n","import { instance } from \"../config\"\nimport { z } from \"zod\";\n\nexport const createLoginShema = z.object({\n  username: z.string().min(5, \"Username should be at least 5 characters\"),\n  password: z.string().min(6, \"Password should be at least 6 characters\"),\n});\n\nexport type createLoginForm = z.infer<typeof createLoginShema>;\n\n\nexport const userShema = z.object({\n  id: z.string(),\n  role: z.string(),\n  username: z.string(),\n})\n\nexport type userType = z.infer<typeof userShema>;\n\nexport async function fetchMe(): Promise<userType> {\n  return (await instance.get(`/me`)\n      .catch((err) => {\n          throw new Error(err.response.data.message)\n        })).data.data\n}\n\nexport async function authLogin(data: createLoginForm): Promise<userType> {\n    await instance.post('/auth/login', data)\n    return fetchMe();\n}\n","import { createLoginForm } from \"../../api/auth/authLogin\";\nimport Key from \"../../svg/Key\";\nimport User from \"../../svg/User\";\nimport { ElementProps } from \"../Register/registerElementArr\";\n\ntype LoginField = keyof createLoginForm;\n\nexport const loginElementArr: Array<ElementProps<LoginField>> = [\n  {\n    id: 1,\n    svg: <User classes=\"user-svg\" color=\"black\" />,\n    placeholder: \"User name\",\n    type: \"text\",\n    name: \"username\",\n  },\n  {\n    id: 2,\n    svg: <Key />,\n    placeholder: \"Password\",\n    type: \"password\",\n    name: \"password\",\n  },\n];\n"],"names":["Key","jsx","createLoginShema","z","fetchMe","instance","err","authLogin","data","loginElementArr","User"],"mappings":"8FAAA,MAAMA,EAAM,IAERC,EAAA,IAAC,MAAA,CACC,UAAU,UACV,MAAM,KACN,OAAO,KACP,QAAQ,YACR,MAAM,6BAEN,SAAAA,EAAA,IAAC,OAAA,CACC,EAAE,iRACF,KAAK,MAAA,CAAA,CACP,CACF,ECVSC,EAAmBC,EAAE,OAAO,CACvC,SAAUA,EAAE,OAAA,EAAS,IAAI,EAAG,0CAA0C,EACtE,SAAUA,EAAE,OAAS,EAAA,IAAI,EAAG,0CAA0C,CACxE,CAAC,EAKwBA,EAAE,OAAO,CAChC,GAAIA,EAAE,OAAO,EACb,KAAMA,EAAE,OAAO,EACf,SAAUA,EAAE,OAAO,CACrB,CAAC,EAID,eAAsBC,GAA6B,CACjD,OAAQ,MAAMC,EAAS,IAAI,KAAK,EAC3B,MAAOC,GAAQ,CACZ,MAAM,IAAI,MAAMA,EAAI,SAAS,KAAK,OAAO,CAAA,CAC1C,GAAG,KAAK,IACjB,CAEA,eAAsBC,EAAUC,EAA0C,CAChE,aAAAH,EAAS,KAAK,cAAeG,CAAI,EAChCJ,EAAQ,CACnB,CCtBO,MAAMK,EAAmD,CAC9D,CACE,GAAI,EACJ,IAAMR,EAAA,IAAAS,EAAA,CAAK,QAAQ,WAAW,MAAM,QAAQ,EAC5C,YAAa,YACb,KAAM,OACN,KAAM,UACR,EACA,CACE,GAAI,EACJ,UAAMV,EAAI,EAAA,EACV,YAAa,WACb,KAAM,WACN,KAAM,UAAA,CAEV"}