{"version":3,"file":"Comment-DOqNDI-1.js","sources":["../../src/api/comments/commentPost.ts","../../src/api/comments/updateComment.ts","../../src/api/answers/postAnswers.ts","../../src/Widgets/NewComment/NewComment.tsx","../../src/api/comments/deleteComment.ts","../../src/Widgets/UpdateBtnComment/UpdateBtnComment.tsx","../../src/Shared/Comment/Comment.tsx"],"sourcesContent":["import { z } from \"zod\";\nimport { instance } from \"../../api/config\";\n\nexport const createCommentShema = z.object({\n  content: z.string().min(1, \"Comment should be at least 1 characters\"),\n  snippetId: z.string(),\n});\n\nexport type createCommentForm = z.infer<typeof createCommentShema>;\n\nexport async function commentPost(data: createCommentForm) {\n  await instance.post('/comments', data)\n  .catch((err) => {\n    throw new Error(err.response.data.message)\n  })\n}\n","import { instance } from \"../../api/config\";\nimport { createCommentForm } from \"./commentPost\";\n\nexport async function updateComment(data: createCommentForm, id: string) {\n  await instance.patch(`/comments/${id}`, data)\n  .catch((err) => {\n    throw new Error(err.response.data.message)\n  })\n}\n","import { createCommentForm } from \"../comments/commentPost\"\nimport { instance } from \"../config\"\n\nexport type AnswerPost = {\n  content: string,\n  questionId: string\n}\n\nexport async function postAnswers(data: createCommentForm) {\n  const newData:AnswerPost = {content: data.content, questionId: data.snippetId}\n  await instance.post('/answers', newData)\n  .catch((err) => {\n    throw new Error(err.response.data.message)\n  })\n}\n","import { FC } from \"react\";\nimport \"./newComment.css\";\nimport { Button } from \"ui-components_innowise\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport Loader from \"../../Shared/Loader/Loader\";\nimport { queryCLient } from \"../../api/queryClients\";\nimport { RootState } from \"../../store/store\";\nimport { useSelector } from \"react-redux\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport InputElement from \"../../Shared/InputElement/InputElement\";\nimport Message from \"../../svg/Message\";\nimport IconButton from \"../../Shared/IconButton/IconButton\";\nimport Close from \"../../svg/Close\";\nimport ErrorMessageFetch from \"../../Shared/ErrorMessageFetch/ErrorMessageFetch\";\nimport {\n  commentPost,\n  createCommentForm,\n  createCommentShema,\n} from \"../../api/comments/commentPost\";\nimport { updateComment } from \"../../api/comments/updateComment\";\nimport { postAnswers } from \"../../api/answers/postAnswers\";\n\ninterface NewCommentProps {\n  snippetId?: string;\n  setStatus: (a: boolean) => void;\n  commentString?: string;\n  commentId?: string;\n  answerId?: string;\n}\n\nconst NewComment: FC<NewCommentProps> = ({\n  snippetId,\n  setStatus,\n  commentString,\n  commentId = \"\",\n  answerId = \"\",\n}) => {\n  const myUsername = useSelector(\n    (state: RootState) => state.userState.username\n  );\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<createCommentForm>({\n    resolver: zodResolver(createCommentShema),\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: commentString\n      ? (data: createCommentForm) => updateComment(data, commentId)\n      : commentPost,\n    onSuccess() {\n      queryCLient.invalidateQueries({\n        queryKey: [`snippets/${snippetId}`],\n      });\n      setStatus(false);\n    },\n  });\n\n  const answerMutation = useMutation({\n    mutationFn: postAnswers,\n    onSuccess() {\n      queryCLient.invalidateQueries({\n        queryKey: [`/questions/${answerId}`],\n      });\n      setStatus(false);\n    },\n  });\n\n  return (\n    <form\n      className={`comment`}\n      onSubmit={handleSubmit((data) => {\n        if (snippetId) {\n          return registerMutation.mutate(data);\n        }\n        if (answerId) {\n          return answerMutation.mutate(data);\n        }\n      })}\n    >\n      <div className={`comment__field comment__input`}>\n        {registerMutation.isError ||\n          (answerMutation.isError && (\n            <ErrorMessageFetch mutation={registerMutation} />\n          ))}\n\n        <IconButton\n          classes=\"close-btn\"\n          svg={<Close classes=\"close-comment-svg\" color=\"grey\" />}\n          onClick={() => setStatus(false)}\n        />\n\n        <p className=\"comment__text\">{myUsername}</p>\n\n        <InputElement\n          placeholder=\"Comment...\"\n          svg={<Message classes=\"user-svg\" color=\"#5053f4\" />}\n          type=\"text\"\n          inputProp={{ ...register(\"content\") }}\n          errorMessage={errors[\"content\"]?.message}\n          newValue={commentString}\n        />\n\n        <input\n          className=\"visually-hidden\"\n          type=\"text\"\n          value={snippetId || answerId}\n          {...register(\"snippetId\")}\n        />\n      </div>\n\n      <Button classes=\"comment-send\">\n        {registerMutation.isPending || answerMutation.isPending ? (\n          <Loader type=\"small\" />\n        ) : (\n          \"Send\"\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default NewComment;\n","import { instance } from \"../config\";\n\nexport async function deleteComment(id: string): Promise<void> {\n  await instance.delete(`/comments/${id}`)\n  .catch((err) => {\n    throw new Error(err.response.data.message)\n  })\n}\n","import { Button } from \"ui-components_innowise\";\nimport \"./updateBtnComment.css\";\nimport { FC } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { deleteComment } from \"../../api/comments/deleteComment\";\nimport Loader from \"../../Shared/Loader/Loader\";\nimport { queryCLient } from \"../../api/queryClients\";\nimport useLastIdLocation from \"../../hooks/useLastIdLocation\";\nimport ErrorMessageFetch from \"../../Shared/ErrorMessageFetch/ErrorMessageFetch\";\nimport { useLocation } from \"react-router\";\n\ninterface UpdateBtnCommentProps {\n  commentId: string;\n  setStatus: (a: boolean) => void;\n}\n\nconst UpdateBtnComment: FC<UpdateBtnCommentProps> = ({\n  commentId,\n  setStatus,\n}) => {\n  const locationId = useLastIdLocation();\n  const location = useLocation();\n\n  const deleteMutation = useMutation({\n    mutationFn: () => deleteComment(commentId),\n    onSuccess() {\n      queryCLient.invalidateQueries({ queryKey: [`snippets/${locationId}`] });\n    },\n  });\n\n  if (location.pathname.includes(\"answers\")) {\n    return null;\n  }\n\n  return (\n    <div>\n      {deleteMutation.isError && (\n        <ErrorMessageFetch mutation={deleteMutation} />\n      )}\n      <Button\n        classes=\"comment__update\"\n        size=\"small\"\n        variant=\"text\"\n        onClick={() => setStatus(true)}\n      >\n        Edit\n      </Button>\n      <Button\n        classes=\"comment__update\"\n        size=\"small\"\n        variant=\"text\"\n        onClick={() => deleteMutation.mutate()}\n      >\n        {deleteMutation.isPending ? <Loader type=\"small\" /> : \"Delete\"}\n      </Button>\n    </div>\n  );\n};\n\nexport default UpdateBtnComment;\n","import { FC, useState } from \"react\";\nimport Message from \"../../svg/Message\";\nimport \"./comment.css\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport UpdateBtnComment from \"../../Widgets/UpdateBtnComment/UpdateBtnComment\";\nimport NewComment from \"../../Widgets/NewComment/NewComment\";\nimport useLastIdLocation from \"../../hooks/useLastIdLocation\";\nimport { OneComment } from \"../../api/snippets/fetchSnippetsComments\";\n\ninterface CommentProps {\n  comment: OneComment;\n}\n\nconst Comment: FC<CommentProps> = ({ comment }) => {\n  const myID = useSelector((state: RootState) => state.userState.id);\n  const [status, setStatus] = useState(false);\n  const locationId = useLastIdLocation();\n\n  return (\n    <li>\n      {!status ? (\n        <div className={`comment`}>\n          <div className={`comment__field field`}>\n            <div className=\"field__top\">\n              <p className=\"comment__text\">{comment?.user.username}</p>\n              {myID === comment.user.id && (\n                <UpdateBtnComment\n                  commentId={comment.id}\n                  setStatus={setStatus}\n                />\n              )}\n            </div>\n            <p>{comment?.content}</p>\n          </div>\n          <div className=\"comment__img\">\n            <Message color=\"white\" classes=\"comment__svg\" />\n          </div>\n        </div>\n      ) : (\n        <NewComment\n          commentString={comment.content}\n          setStatus={setStatus}\n          snippetId={locationId}\n          commentId={comment.id}\n        />\n      )}\n    </li>\n  );\n};\n\nexport default Comment;\n"],"names":["createCommentShema","z","commentPost","data","instance","err","updateComment","id","postAnswers","newData","NewComment","snippetId","setStatus","commentString","commentId","answerId","myUsername","useSelector","state","register","handleSubmit","errors","useForm","zodResolver","registerMutation","useMutation","queryCLient","answerMutation","jsxs","jsx","ErrorMessageFetch","IconButton","Close","InputElement","Message","_a","Button","Loader","deleteComment","UpdateBtnComment","locationId","useLastIdLocation","location","useLocation","deleteMutation","Comment","comment","myID","status","useState"],"mappings":"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"}